# -*- coding: utf-8 -*-
"""rfn-korea-train.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Jr2CICNUtL0BIiAsh3M018ubaXndvopL

### How to Train Relational Fusion Network and Basline Algorithms
-- From original notebook

This notebook gives a brief overview on how to define and train Relational Fusion Networks (RFNs) [1]. You may find an extended arXiv preprint of the paper [here](https://arxiv.org/abs/1908.11567).

The implementation relies on the deep learning framework [MXNet](https://mxnet.incubator.apache.org/), but familiarity with other deep learning frameworks should be sufficient to understand this tutorial. If you are not familiar with any deep learning framework, consider reading [MXNet's tutorial]](https://beta.mxnet.io/guide/crash-course/index.html) on their Gluon API which is used in this library.

--

For baseline models, deep graph library with PyTorch backend was used.
"""

# Commented out IPython magic to ensure Python compatibility.
# %load_ext autoreload
# %autoreload 2

# from google.colab import drive
# drive.mount('/content/drive')

# fast dgl installation
# !pip install  dgl -f https://data.dgl.ai/wheels/cu102/repo.html
# !pip install  dglgo -f https://data.dgl.ai/wheels-test/repo.html

# """system packages for building the shared library"""

# !git clone --recurse-submodules https://github.com/dmlc/dgl.git

# !sudo apt-get update
# !sudo apt-get install -y build-essential python3-dev make cmake

# """- create build folder in dgl"""

# Commented out IPython magic to ensure Python compatibility.
# we are in /content
# %cd /content/dgl/build
# !pwd
# !cmake -DUSE_CUDA=ON ..
# !make -j4

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/dgl/python
# !python setup.py install

# !pip install mxnet-cu102 #112

# !pip install osmnx

# !git clone https://github.com/juhyeonkim95/GCN2020FinalProject.git

import os
os.sys.path.append('/workspace/RFNEmission/custom')
os.sys.path.append('/workspace/RFNEmission')
# os.sys.path.append('./content/drive/MyDrive/Colab Notebooks')

print(os.getcwd())

# !cp "/content/GCN2020FinalProject/custom/utils.py" .
# !cp "/content/GCN2020FinalProject/custom/city.py" .
# %run "/content/GCN2020FinalProject/custom/utils.py"

from rfn.factory_functions import make_rfn, RFNLayerSpecification, FeatureInfo
from rfn.relational_fusion.normalizers import NoNormalization, L2Normalization
from mxnet.gluon.nn import ELU

# CUDA 10.2
# !pip install torch==1.12.1+cu102 torchvision==0.13.1+cu102 torchaudio==0.12.1 --extra-index-url https://download.pytorch.org/whl/cu102

import torch
print(torch.__version__) #2.0.1+cu118

# %cd
import RFNEmission
from RFNEmission import custom
from RFNEmission.custom import utils
# import GCN2020FinalProject

"""### Train
First, define train city sets.
"""

train_cities = ["busan", "daejeon", "goyang", "gwangju", "incheon", "changwon", "seongnam", "cheongju"]
# test_cities = ["daegu", "suwon", "ulsan", "yongin"]

"""Then define models to train. We used 4 RFN vaiations and 4 baseline models(GAT, GCB, GraphSAGE and MLP)."""

from custom.rfn_trainer import RFNTrainer
from custom.gcn_trainer import GCNTrainer
from custom.mlp_trainer import MLPTrainer

# RFN models
rfn_trainer_ia = RFNTrainer(fusion='interactional', aggregator='attentional')
rfn_trainer_in = RFNTrainer(fusion='interactional', aggregator='non-attentional')
rfn_trainer_aa = RFNTrainer(fusion='additive', aggregator='attentional')
rfn_trainer_an = RFNTrainer(fusion='additive', aggregator='non-attentional')

# Baseline models
gcn_trainer_gat = GCNTrainer("gat")
gcn_trainer_gcn = GCNTrainer("gcn")
gcn_trainer_gsg = GCNTrainer("graphsage")
mlp_trainer = MLPTrainer()


rfn_models = [rfn_trainer_ia, rfn_trainer_in, rfn_trainer_aa, rfn_trainer_an]
baseline_models = [gcn_trainer_gat, gcn_trainer_gcn, gcn_trainer_gsg, mlp_trainer]
train_models = rfn_models + baseline_models

# !pip install torch==2.0.1+cu117 torchvision==0.11.1+cu113 torchaudio==0.10.0+cu113 -f https://download.pytorch.org/whl/cu113/torch_stable.html

# make_dual_graph

"""Add city information to trainer. Note that MXNet is used for RFN while dgl+PyTorch is used for the rest."""

import osmnx

for city_name in train_cities:
    G = utils.load_city_graph(city_name)
    rfn_city, dgl_city = utils.generate_required_city_graph(city_name, G)
    for t in train_models:
        if isinstance(t, RFNTrainer):
            t.add_city(rfn_city)
        else:
            t.add_city(dgl_city)

"""Train each model 100 times."""

train_results = {}
for t in train_models:
    print(t.name)
    t.build()
    train_results[t.name] = t.train(1, verbose=False)

"""Let's plot train log with exponential weighted moving average."""

train_results_ewma = pd.DataFrame.from_dict(train_results)
train_results_ewma = results_pd.ewm(span=8).mean()

import matplotlib.pyplot as plt
L = len(list(train_results.values())[0])
for t in train_models:
    plt.plot([i for i in range(L)], train_results_ewma[t.name], label=t.name)
plt.legend()
plt.ylim((0.0, 0.2))
plt.show()

"""Finally export model data."""

import datetime
import os
datetimename = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
os.mkdir("model_data/%s" % datetimename)
for t in train_models:
    t.save_params("model_data/%s/%s" % (datetimename, t.name))

"""## References
[1]: Tobias Skovgaard Jepsen, Christian S. Jensen, and Thomas Dyhre Nielsen.  "Graph Convolutional Networks for Road Networks." In _27th ACM SIGSPATIAL International Conference on Advances in Geographic Information Systems (SIGSPATIAL â€™19)_. 2019.

[2]: Tobias Skovgaard Jepsen, Christian S. Jensen, and Thomas Dyhre Nielsen. "Graph Convolutional Networks for Road Networks." _arXiv e-prints_, arXiv:1908.11567. 2019.

[3]: Hamilton, Will, Zhitao Ying, and Jure Leskovec. "Inductive representation learning on large graphs." _Advances in Neural Information Processing Systems_. 2017.
"""
